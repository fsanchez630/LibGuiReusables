/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LibGuiReusables;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * clase derivada Formulario por Fichas
 *
 * @author Javi
 */
public class LibFormularioPorFichas extends LibFormularioExtensible implements ActionListener, ChangeListener, IComunicable, IValidable {

    // panel primcipal 
    private JPanel panelPrincipal;
    // panel por fichas
    private JTabbedPane panelPorFichas;

    /**
     * Constructor por defecto crea el panel principal y el panel por fichas
     */
    public LibFormularioPorFichas() {
        initComponents();
        panelPrincipal = new JPanel();
        panelPorFichas = new JTabbedPane();
        //this.setContentPane(panelPrincipal);
        //this.getContentPane().add(panelPorFichas);
        panelPrincipal.setLayout(new BorderLayout());
        panelPrincipal.add(panelPorFichas);
        this.getContentPane().add(panelPrincipal, BorderLayout.CENTER);

    }

    @Override
    public Boolean configurarFormulario() {

        if (super.configurarFormulario()) {

            pack();
            //Set up the content pane.

           // this.setSize(500, 400);
            //this.setResizable(false);

            //this.setExtendedState(MAXIMIZED_BOTH);
            return true;
        } else {
            return false;
        }
    }
    
    
    /**
     * incluye un nuevo hijo
     *
     * @param hijo
     * @param titulo
     * @throws java.lang.Exception cuando se supera el maximo de hijos = 2 ,en
     * Formulario Simple
     */
    @Override
    public void addHijoExtensible(LibFormularioExtensible hijo, String titulo) throws Exception {

       
        if (this instanceof LibFormularioPorFichas) {
            hijo.setnombreContenedor(titulo);
            getHijosExtensibles().add((LibFormularioExtensible) hijo.clone());

            JPanel panelHijo = (JPanel) hijo.getContentPane();
            // panelHijo.setLayout(null);

          //  LibFormularioPorFichas padrePorFichas = (LibFormularioPorFichas) this;

          //  JTabbedPane panelPorFichas = (JTabbedPane) padrePorFichas.obtenerValor("panelPorFichas");
            panelPorFichas.addTab(titulo, panelHijo);

        }

       

    }

    /**
     * inclye los hijos de una lista
     *
     * @param listaHijos
     * @param titulo
     * @throws java.lang.Exception cuando se supera el maximo de hijos = 2 ,en
     * Formulario Simple
     */
    @Override
    public void addListaHijosExtensibles(ArrayList<LibFormularioExtensible> listaHijos, String titulo) throws Exception {
        if (titulo.isEmpty() || titulo.equals(getnombreContenedor())) {
        } else {
            setnombreContenedor (titulo) ;
        }

             
          //  LibFormularioPorFichas padrePorFichas = (LibFormularioPorFichas) this;
            JPanel panelCombinado = new JPanel();
            //panelCombinado.setLayout((new BoxLayout(panelCombinado, BoxLayout.Y_AXIS)));
            //panelCombinado.setLayout((new GridLayout(0, 1)));
            panelCombinado.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));
            for (LibFormularioExtensible hijo : listaHijos) {
                getHijosExtensibles().add((LibFormularioExtensible) hijo.clone());

                JPanel panelHijo = (JPanel) hijo.getContentPane();
                // panelHijo.setLayout(null);

                panelCombinado.add(panelHijo);

            }
       //     JTabbedPane panelPorFichas = (JTabbedPane) padrePorFichas.obtenerValor("panelPorFichas");
            panelPorFichas.addTab(titulo, panelCombinado);

            

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * metodos de la Interface IComunicable
     */
    @Override
    public void cambiarValor(String nombreComponente, Object valor) {
        System.out.println("cambiar valor");
        if ("panelPrincipal".equals(nombreComponente)) {
            panelPrincipal = (JPanel) valor;
            //  this.setContentPane(panelPrincipal);
        }

        if ("panelPorFichas".equals(nombreComponente)) {
            panelPorFichas = (JTabbedPane) valor;
        }
    }

    @Override
    public void recuperarValorExterno(String nombreComponente, Object valor) {
        System.out.println("recuperar valor");
    }

    @Override
    public Object obtenerValor(String nombreComponente) {
        System.out.println("obtener valor");
        Object retorno = null;
        if ("panelPrincipal".equals(nombreComponente)) {
            retorno = panelPrincipal;
        }

        if ("panelPorFichas".equals(nombreComponente)) {
            retorno = panelPorFichas;
        }

        return retorno;
    }

    /**
     * metodos de gestion de eventos
     */
    @Override
    public void actionPerformed(ActionEvent evt) {
        System.out.println("Bot√≥n pulsado: " + evt.getActionCommand());
    }

    @Override
    public void stateChanged(ChangeEvent evt) {
        System.out.println("evento cambio");
    }

}
